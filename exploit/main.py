import cmd
import os
import sys
import time
from utils import startup
from modules import *
from modules import module_list, get_all_modules
from style import logo
from py_console import console, bgColor, textColor

if os.getuid() != 0:
  console.warn("The Tool must be run with sudo privileges! ")
  sys.exit(-1)

#bei update wenn ja -> pyinquire

##for i in range(100):
##    time.sleep(0.1)
##    sys.stdout.write("\r%d%%" % i)
##    sys.stdout.flush()
startup.startup()
print("\x1B[2J\x1B[H")

completions = module_list()
console.setShowTimeDefault(False)

class Main(cmd.Cmd):

  intro = logo()

  prompt = "exploit > "
  doc_header = 'Commands'
  undoc_header = 'Undocumented Commands'

  def do_use(self, line):
    #check if line in module_list()
    if line in module_list():
      module = globals()[line]
      if hasattr(module, 'Main'):
        module = module.Main()
        module.prompt = f"exploit (\u001b[31m{line}\u001b[0m) > "
        module.cmdloop()
      else:
        console.error(f"**** Module {line} not found! ****")
    else:
      console.error(f"**** Module {line} not found! ****")

  def do_show(self, line):
    get_all_modules()

  def do_exit(self, line):
    console.warn("Exiting...")
    return 1

  def complete_use(selfself, text, line, begidx, endidx):
    mline = line.partition(' ')[2]
    offs = len(mline) - len(text)
    return [s[offs:] for s in completions if s.startswith(mline)]

  def default(self, line):
    cmd, arg, line = self.parseline(line)
    func = [
      getattr(self, n) for n in self.get_names() if n.startswith('do_' + cmd)
    ]
    if func:
      func[0](arg)
    else:
      os.system(line)

  def do_about(self, line):
    print("version 1.0"
          )  # put into class (update,module_list,version,update,about)

  def do_update(self, line):
    print("Update Command")


def start_exploittool():
  try:
    Main().cmdloop()
  except KeyboardInterrupt:
    console.error("\nForce exciting Program...")


if __name__ == '__main__':
  start_exploittool()
