import os
import scapy.layers.dot11
from sys import platform
import utils.modulemanager as md
from scapy.all import *
import pandas
import time
import os
from utils import checklibraries
from py_console import console, bgColor, textColor


class Main(md.Module):
    """Module for Scanning for available Wifi"""
    parameters = {"device": "wlan0", "device_monitor": "wlan0mon", "channel": "1", "change_channel": "False"}
    completions = list(parameters.keys())

    networks = pandas.DataFrame(columns=["BSSID", "SSID", "Signal_strength", "Channel", "Crypto"])
    networks.set_index("BSSID", inplace=True)

    def callback(self, packet):
        if packet.haslayer(scapy.layers.dot11.Dot11Beacon) or packet.haslayer(scapy.layers.dot11.Dot11ProbeResp):
          if packet.type == 0 and packet.subtype == 8:
            bssid = packet[scapy.layers.dot11.Dot11].addr2

            ssid = packet[scapy.layers.dot11.Dot11Elt].info.decode()

            try:
                dbm_signal = packet.dBm_AntSignal
            except:
                dbm_signal = "N/A"

            stats = packet[scapy.layers.dot11.Dot11Beacon].network_stats()

            channel = stats.get("channel")

            crypto = stats.get("crypto")

            self.networks.loc[bssid] = (ssid, dbm_signal, channel, crypto)

    def do_exploit(self, line):
        console.log("Putting network Adapter into monitoring mode.")
        console.log("\n")
        os.system("sudo airmon-ng check kill")
        os.system("sudo ifconfig wlan0 down")
        os.system("sudo iwconfig wlan0 mode monitor")
        os.system("sudo ifconfig wlan0 up")
        # os.system("airmon-ng start " + self.parameters['device'])
        # os.system("iwconfig")
        console.log("\n")
        try:
            interface = self.parameters['device_monitor']

            sniff(prn=self.callback, iface=interface)
            ch = int(self.parameters['channel'])
            os.system(f"sudo iwconfig {interface} channel {ch}")
            change_channel = self.parameters['change_channel']
            while True:
                if platform == "linux":
                    os.system("clear")
                if platform == "win32":
                    os.system("cls")
                console.log(self.networks)
                if change_channel == "True":
                    os.system(f"sudo iwconfig {interface} channel {ch}")
                    ch = ch % 14 + 1
                    print(ch)
                    time.sleep(0.5)
                else:
                    time.sleep(0.05)
        except KeyboardInterrupt:
            console.info("Stopping Sniffing WLAN")

    def complete_set(self, text, line, begidx, endidx):
        splitline = line.partition(' ')[2]
        offs = len(splitline) - len(text)
        return [s[offs:] for s in self.completions if s.startswith(splitline)]
